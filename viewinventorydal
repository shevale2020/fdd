using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using Wns.Sdg.Product.FAR.DataAccessLayer.Interface;
using Wns.Sdg.Product.FAR.Entity;
using System.Configuration;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Web;


namespace Wns.Sdg.Product.FAR.DataAccessLayer
{
    public class ViewInventoryDal : IViewInventoryDal
    {
        public List<ParameterValues> GetParameterdesc(ParameterValues ParameterId)
        {
            List<ParameterValues> ParameterResult = new List<ParameterValues>();
            string SpName = "Proc_GetInventorydetailPOGRN";

            SqlParameter[] SqlParams = new SqlParameter[8];
            SqlParams[0] = new SqlParameter("@ExecId", SqlDbType.BigInt);
            SqlParams[0].Value = 5;
            SqlParams[1] = new SqlParameter("@PONumber", SqlDbType.NVarChar);
            SqlParams[1].Value = 0;
            SqlParams[2] = new SqlParameter("@GRNNumber", SqlDbType.NVarChar);
            SqlParams[2].Value = 0;
            SqlParams[3] = new SqlParameter("@parameterdescr", SqlDbType.NVarChar);
            SqlParams[3].Value = ParameterId.ParameterDescr;
            SqlParams[4] = new SqlParameter("@InventoryType", SqlDbType.NVarChar);
            SqlParams[4].Value = 0;
            SqlParams[5] = new SqlParameter("@EmpID", SqlDbType.NVarChar);
            SqlParams[5].Value = Convert.ToString(ParameterId.Emplid);
            SqlParams[6] = new SqlParameter("@UserID", SqlDbType.NVarChar);
            SqlParams[6].Value = Convert.ToString(ParameterId.UserID);
            SqlParams[7] = new SqlParameter("@RoleID", SqlDbType.NVarChar);
            SqlParams[7].Value = Convert.ToString(ParameterId.RoleID);
            DataTable dt = SqlHelper.ExecuteDataset(Utility.ConnectionString, SpName, SqlParams).Tables[0];
            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    ParameterValues ParameterValue = new ParameterValues();
                    ParameterValue.ParameterValue = Convert.ToString(dt.Rows[i]["ParameterValue"]);
                    ParameterValue.ParameterValueID = Convert.ToString(dt.Rows[i]["ParameterValueID"]);
                    ParameterResult.Add(ParameterValue);
                }
            }
            return ParameterResult;
        }

        public InventoryEntity ViewInventory(InventoryEntity objInventoryEntity)
        {
            InventoryEntity ParameterResult = new InventoryEntity();
            string SpName = "Proc_ViewInventoryDetails";
            string strSeq = string.Empty;
            SqlParameter[] SqlParams = new SqlParameter[13];
            SqlParams[0] = new SqlParameter("@PONumber", SqlDbType.NVarChar);
            SqlParams[0].Value = objInventoryEntity.PoNumber;
            SqlParams[1] = new SqlParameter("@INV_TYPE", SqlDbType.NVarChar);
            SqlParams[1].Value = objInventoryEntity.InvType;
            SqlParams[2] = new SqlParameter("@SerialNumber", SqlDbType.NVarChar);
            SqlParams[2].Value = objInventoryEntity.SerialNumber;
            SqlParams[3] = new SqlParameter("@TAGNumber", SqlDbType.NVarChar);
            SqlParams[3].Value = objInventoryEntity.TAGNumber;
            SqlParams[4] = new SqlParameter("@Location", SqlDbType.NVarChar);
            if (objInventoryEntity.Location == "Select Location")
                SqlParams[4].Value = DBNull.Value;
            else
                SqlParams[4].Value = objInventoryEntity.Location;
            SqlParams[5] = new SqlParameter("@AssetType", SqlDbType.BigInt);

            if (objInventoryEntity.AssetTypeID == "Select Asset Type")
                SqlParams[5].Value = DBNull.Value;
            else
                SqlParams[5].Value = objInventoryEntity.AssetTypeID;
            SqlParams[6] = new SqlParameter("@Mode", SqlDbType.NVarChar);
            SqlParams[6].Value = objInventoryEntity.Mode;
            SqlParams[7] = new SqlParameter("@InventoryId", SqlDbType.NVarChar);
            SqlParams[7].Value = objInventoryEntity.InventoryID;
            SqlParams[8] = new SqlParameter("@EmpID", SqlDbType.NVarChar);
            SqlParams[8].Value = Convert.ToString(objInventoryEntity.Emplid);
            SqlParams[9] = new SqlParameter("@UserID", SqlDbType.NVarChar);
            SqlParams[9].Value = Convert.ToString(objInventoryEntity.UserID);
            SqlParams[10] = new SqlParameter("@RoleID", SqlDbType.NVarChar);
            SqlParams[10].Value = Convert.ToString(objInventoryEntity.RoleID);
                
            SqlParams[11] = new SqlParameter("@PageNumber", SqlDbType.Int);
            SqlParams[11].Value = objInventoryEntity.PageNumber;
            SqlParams[12] = new SqlParameter("@PageSize", SqlDbType.Int);
            SqlParams[12].Value = objInventoryEntity.PageSize;


            DataSet ds = SqlHelper.ExecuteDataset(Utility.ConnectionString, SpName, SqlParams);
            if (objInventoryEntity.Mode == "View")
            {
                if (ds != null)
                {
                    if (ds.Tables.Count > 0)
                    {
                        switch (objInventoryEntity.InvType)
                        {
                            case "Desktop":
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        
                                        ParameterResult.dtInventoryDesktopDetailEntity = ds.Tables[0];
                                    }
                                    strSeq = "1,";
                                    break;
                                }
                            case "Laptop":
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                       
                                        ParameterResult.dtInventoryLaptopDetailEntity = ds.Tables[0];
                                    }
                                    strSeq = "2,";
                                    break;
                                }
                            case "Network":
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                      
                                        ParameterResult.dtInventoryNetworkDetailEntity = ds.Tables[0];
                                    }
                                    strSeq = "3,";
                                    break;
                                }
                            case "Server":
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                      
                                        ParameterResult.dtInventoryServerDetailEntity = ds.Tables[0];
                                    }
                                    strSeq = "4,";
                                    break;
                                }
                            case "Telecom":
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                       
                                        ParameterResult.dtInventoryTelecomDetailEntity = ds.Tables[0];
                                    }
                                    strSeq = "5,";
                                    break;
                                }
                            case "Infra":
                                {
                                    //Start - Infra Inventory P2 Changes
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        
                                        ParameterResult.dtInventoryInfraDetailEntity = ds.Tables[0];
                                    }
                                    strSeq = "6,";
                                    //End - Infra Inventory P2 Changes
                                    break;
                                }
                            default:
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        strSeq = strSeq + "1,";
                                        ParameterResult.dtInventoryDesktopDetailEntity = ds.Tables[0];
                                    }

                                    if (ds.Tables[1].Rows.Count > 0)
                                    {
                                        strSeq = strSeq + "2,";
                                        ParameterResult.dtInventoryLaptopDetailEntity = ds.Tables[1];
                                    }
                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        strSeq = strSeq + "3,";
                                        ParameterResult.dtInventoryNetworkDetailEntity = ds.Tables[2];
                                    }
                                    if (ds.Tables[3].Rows.Count > 0)
                                    {
                                        strSeq = strSeq + "4,";
                                        ParameterResult.dtInventoryServerDetailEntity = ds.Tables[3];
                                    }
                                    if (ds.Tables[4].Rows.Count > 0)
                                    {
                                        strSeq = strSeq + "5,";
                                        ParameterResult.dtInventoryTelecomDetailEntity = ds.Tables[4];
                                    }
                                    //Start - Infra Inventory P2 Changes
                                    if (ds.Tables[5].Rows.Count > 0)
                                    {
                                        strSeq = strSeq + "6,";
                                        ParameterResult.dtInventoryInfraDetailEntity = ds.Tables[5];
                                    }
                                    //End - Infra Inventory P2 Changes

                                    break;
                                }
                        };
                    }
                }
            }
            else
            {
                if (ds != null)
                {
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable dt = ds.Tables[0];
                            if (objInventoryEntity.InvType == "Desktop")
                                ParameterResult.dtInventoryDesktopDetailEntity = dt.Copy();
                            if (objInventoryEntity.InvType == "Laptop")
                                ParameterResult.dtInventoryLaptopDetailEntity = dt.Copy();
                            if (objInventoryEntity.InvType == "Network")
                                ParameterResult.dtInventoryNetworkDetailEntity = dt.Copy();
                            if (objInventoryEntity.InvType == "Server")
                                ParameterResult.dtInventoryServerDetailEntity = dt.Copy();
                            if (objInventoryEntity.InvType == "Telecom")
                                ParameterResult.dtInventoryTelecomDetailEntity = dt.Copy();
                            //Start - Infra Inventory P2 Changes
                            if (objInventoryEntity.InvType == "Infra")
                                ParameterResult.dtInventoryInfraDetailEntity = dt.Copy();
                            //End - Infra Inventory P2 Changes

                        }
                    }
                }
            }

            ParameterResult.strSeq = strSeq;



            return ParameterResult;
        }


        public InventoryEntity GetLaptopAuditTrail(InventoryEntity objInventoryEntity)
        {
            InventoryEntity ParameterResult = new InventoryEntity();
            string SpName = "Proc_GetLaptopAuditTrail";
            //  string strSeq = string.Empty;
            SqlParameter[] SqlParams = new SqlParameter[11];
            SqlParams[0] = new SqlParameter("@PONumber", SqlDbType.NVarChar);
            SqlParams[0].Value = objInventoryEntity.PoNumber;
            SqlParams[1] = new SqlParameter("@INV_TYPE", SqlDbType.NVarChar);
            SqlParams[1].Value = objInventoryEntity.InvType;
            SqlParams[2] = new SqlParameter("@SerialNumber", SqlDbType.NVarChar);
            SqlParams[2].Value = objInventoryEntity.SerialNumber;
            SqlParams[3] = new SqlParameter("@TAGNumber", SqlDbType.NVarChar);
            SqlParams[3].Value = objInventoryEntity.TAGNumber;
            SqlParams[4] = new SqlParameter("@Location", SqlDbType.NVarChar);
            if (objInventoryEntity.Location == "Select Location")
                SqlParams[4].Value = DBNull.Value;
            else
                SqlParams[4].Value = objInventoryEntity.Location;
            SqlParams[5] = new SqlParameter("@AssetType", SqlDbType.BigInt);

            if (objInventoryEntity.AssetTypeID == "Select Asset Type")
                SqlParams[5].Value = DBNull.Value;
            else
                SqlParams[5].Value = objInventoryEntity.AssetTypeID;
            SqlParams[6] = new SqlParameter("@Mode", SqlDbType.NVarChar);
            SqlParams[6].Value = objInventoryEntity.Mode;
            SqlParams[7] = new SqlParameter("@InventoryId", SqlDbType.NVarChar);
            SqlParams[7].Value = objInventoryEntity.InventoryID;

            SqlParams[8] = new SqlParameter("@EmpID", SqlDbType.NVarChar);
            SqlParams[8].Value = Convert.ToString(objInventoryEntity.Emplid);
            SqlParams[9] = new SqlParameter("@UserID", SqlDbType.NVarChar);
            SqlParams[9].Value = Convert.ToString(objInventoryEntity.UserID);
            SqlParams[10] = new SqlParameter("@RoleID", SqlDbType.NVarChar);
            SqlParams[10].Value = Convert.ToString(objInventoryEntity.RoleID);

            DataSet ds = SqlHelper.ExecuteDataset(Utility.ConnectionString, SpName, SqlParams);
            if (objInventoryEntity.Mode == "View")
            {
                if (ds != null)
                {
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {

                            ParameterResult.dtLaptopAuditTrail = ds.Tables[0];
                        }

                    }
                }
            }





            return ParameterResult;
        }



        public InventoryEntity EditInventoryDesktop(InventoryEntity objInventoryDesktopDetailEntity)
        {
            InventoryEntity ParameterResult = new InventoryEntity();
            string SpName = "Proc_UpdateInventory";
            DataSet ds = null; DataSet dsL = null; DataSet dsN = null; DataSet dsS = null; DataSet dsT = null;
            //Start - Infra Inventory P2 Changes
            DataSet dsI = null;
            //End - Infra Inventory P2 Changes


            if (objInventoryDesktopDetailEntity.lstInventoryDesktopDetailEntity != null)
            {
                ds = ExtensionMethods.ToDataSet(objInventoryDesktopDetailEntity.lstInventoryDesktopDetailEntity);
                ds.Tables[0].TableName = "InventoryDesktopDetailType";
            }

            if (objInventoryDesktopDetailEntity.lstInventoryLaptopDetailEntity != null)
            {
                dsL = ExtensionMethods.ToDataSet(objInventoryDesktopDetailEntity.lstInventoryLaptopDetailEntity);
                dsL.Tables[0].TableName = "InventoryLaptopDetailType";
            }

            if (objInventoryDesktopDetailEntity.lstInventoryNetworkDetailEntity != null)
            {
                dsN = ExtensionMethods.ToDataSet(objInventoryDesktopDetailEntity.lstInventoryNetworkDetailEntity);
                dsN.Tables[0].TableName = "InventoryNetworkDetailType";
            }

            if (objInventoryDesktopDetailEntity.lstInventoryServerDetailEntity != null)
            {
                dsS = ExtensionMethods.ToDataSet(objInventoryDesktopDetailEntity.lstInventoryServerDetailEntity);
                dsS.Tables[0].TableName = "InventoryServerDetailType";
            }

            if (objInventoryDesktopDetailEntity.lstInventoryTelecomDetailEntity != null)
            {
                dsT = ExtensionMethods.ToDataSet(objInventoryDesktopDetailEntity.lstInventoryTelecomDetailEntity);
                dsT.Tables[0].TableName = "InventoryTelecomDetailType";
            }

            //Start - Infra Inventory P2 Changes
            if (objInventoryDesktopDetailEntity.lstInventoryInfraDetailEntity != null)
            {
                dsI = ExtensionMethods.ToDataSet(objInventoryDesktopDetailEntity.lstInventoryInfraDetailEntity);
                dsI.Tables[0].TableName = "InventoryInfraDetailType";
            }
            //End - Infra Inventory P2 Changes

            SqlParameter[] SqlParams = new SqlParameter[11];
            SqlParams[0] = new SqlParameter("@Emplid", SqlDbType.NVarChar);
            SqlParams[0].Value = objInventoryDesktopDetailEntity.Emplid;
            SqlParams[1] = new SqlParameter("@RoleID", SqlDbType.NVarChar);
            SqlParams[1].Value = objInventoryDesktopDetailEntity.RoleID;
            SqlParams[2] = new SqlParameter("@UserID", SqlDbType.Int);
            SqlParams[2].Value = objInventoryDesktopDetailEntity.UserID;
            SqlParams[3] = new SqlParameter("@InventoryID", SqlDbType.NVarChar);
            SqlParams[3].Value = objInventoryDesktopDetailEntity.InventoryID;
            SqlParams[4] = new SqlParameter("@InventoryType", SqlDbType.NVarChar);
            SqlParams[4].Value = objInventoryDesktopDetailEntity.InventoryType;
            if (ds != null)
            {
                if (ds.Tables["InventoryDesktopDetailType"] != null && ds.Tables[0].Rows.Count > 0)
                {
                    SqlParams[5] = new SqlParameter("@InventoryDesktopDetailType", ds.Tables["InventoryDesktopDetailType"]);
                    SqlParams[5].SqlDbType = SqlDbType.Structured;
                }
            }
            if (dsL != null)
            {
                if (dsL.Tables["InventoryLaptopDetailType"] != null && dsL.Tables[0].Rows.Count > 0)
                {
                    SqlParams[6] = new SqlParameter("@InventoryLaptopDetailType", dsL.Tables["InventoryLaptopDetailType"]);
                    SqlParams[6].SqlDbType = SqlDbType.Structured;
                }
            }
            if (dsN != null)
            {
                if (dsN.Tables["InventoryNetworkDetailType"] != null && dsN.Tables[0].Rows.Count > 0)
                {
                    SqlParams[7] = new SqlParameter("@InventoryNetworkDetailType", dsN.Tables["InventoryNetworkDetailType"]);
                    SqlParams[7].SqlDbType = SqlDbType.Structured;
                }
            }
            if (dsS != null)
            {
                if (dsS.Tables["InventoryServerDetailType"] != null && dsS.Tables[0].Rows.Count > 0)
                {
                    SqlParams[8] = new SqlParameter("@InventoryServerDetailType", dsS.Tables["InventoryServerDetailType"]);
                    SqlParams[8].SqlDbType = SqlDbType.Structured;

                }
            }
            if (dsT != null)
            {
                if (dsT.Tables["InventoryTelecomDetailType"] != null && dsT.Tables[0].Rows.Count > 0)
                {
                    SqlParams[9] = new SqlParameter("@InventoryTelecomDetailType", dsT.Tables["InventoryTelecomDetailType"]);
                    SqlParams[9].SqlDbType = SqlDbType.Structured;
                }
            }

            //Start - Infra Inventory P2 Changes
            if (dsI != null)
            {
                if (dsI.Tables["InventoryInfraDetailType"] != null && dsI.Tables[0].Rows.Count > 0)
                {
                    SqlParams[10] = new SqlParameter("@InventoryInfraDetailType", dsI.Tables["InventoryInfraDetailType"]);
                    SqlParams[10].SqlDbType = SqlDbType.Structured;
                }
            }
            //End - Infra Inventory P2 Changes

            string g = (string)SqlHelper.ExecuteScalar(Utility.ConnectionString, CommandType.StoredProcedure, SpName, SqlParams);
            ParameterResult.Msg = g;

            //START -- Send Email Block for Return Inventory
            if (ParameterResult.Msg.ToUpper().Contains("SUCCESSFULLY"))
            {
                string Emplid = Convert.ToString(objInventoryDesktopDetailEntity.Emplid),
                       RoleID = Convert.ToString(objInventoryDesktopDetailEntity.RoleID),
                       UserID = Convert.ToString(objInventoryDesktopDetailEntity.UserID),
                       PoNumber = "", GRNNumber = "",
                       InventoryID = Convert.ToString(objInventoryDesktopDetailEntity.InventoryID),
                       InventoryType = Convert.ToString(objInventoryDesktopDetailEntity.InventoryTypeID);

                SendMailUpdateInventoryToInternalTeam(Emplid, RoleID, UserID, InventoryID, InventoryType);

                if (ds != null)
                {
                    if (ds.Tables["InventoryDesktopDetailType"] != null && ds.Tables["InventoryDesktopDetailType"].Rows.Count > 0)
                    {
                        if (objInventoryDesktopDetailEntity.AssetValidationStatusID == 2)
                        {
                            PoNumber = ds.Tables["InventoryDesktopDetailType"].Rows[0]["PoNumber"].ToString();
                            GRNNumber = ds.Tables["InventoryDesktopDetailType"].Rows[0]["GRNNumber"].ToString();
                            AddInventoryReturnInventoryFATeam(Emplid, RoleID, UserID, PoNumber, GRNNumber, InventoryID);
                        }
                    }
                }

                if (dsL != null)
                {
                    if (dsL.Tables["InventoryLaptopDetailType"] != null && dsL.Tables["InventoryLaptopDetailType"].Rows.Count > 0)
                    {
                        if (objInventoryDesktopDetailEntity.AssetValidationStatusID == 2)
                        {
                            PoNumber = dsL.Tables["InventoryLaptopDetailType"].Rows[0]["PoNumber"].ToString();
                            GRNNumber = dsL.Tables["InventoryLaptopDetailType"].Rows[0]["GRNNumber"].ToString();
                            AddInventoryReturnInventoryFATeam(Emplid, RoleID, UserID, PoNumber, GRNNumber, InventoryID);
                        }
                    }
                }

                if (dsN != null)
                {
                    if (dsN.Tables["InventoryNetworkDetailType"] != null && dsN.Tables["InventoryNetworkDetailType"].Rows.Count > 0)
                    {
                        if (objInventoryDesktopDetailEntity.AssetValidationStatusID == 2)
                        {
                            PoNumber = dsN.Tables["InventoryNetworkDetailType"].Rows[0]["PoNumber"].ToString();
                            GRNNumber = dsN.Tables["InventoryNetworkDetailType"].Rows[0]["GRNNumber"].ToString();
                            AddInventoryReturnInventoryFATeam(Emplid, RoleID, UserID, PoNumber, GRNNumber, InventoryID);
                        }
                    }
                }

                if (dsS != null)
                {
                    if (dsS.Tables["InventoryServerDetailType"] != null && dsS.Tables["InventoryServerDetailType"].Rows.Count > 0)
                    {
                        if (objInventoryDesktopDetailEntity.AssetValidationStatusID == 2)
                        {
                            PoNumber = dsS.Tables["InventoryServerDetailType"].Rows[0]["PoNumber"].ToString();
                            GRNNumber = dsS.Tables["InventoryServerDetailType"].Rows[0]["GRNNumber"].ToString();
                            AddInventoryReturnInventoryFATeam(Emplid, RoleID, UserID, PoNumber, GRNNumber, InventoryID);
                        }
                    }
                }


                if (dsT != null)
                {
                    if (dsT.Tables["InventoryTelecomDetailType"] != null && dsT.Tables["InventoryTelecomDetailType"].Rows.Count > 0)
                    {
                        if (objInventoryDesktopDetailEntity.AssetValidationStatusID == 2)
                        {
                            PoNumber = dsT.Tables["InventoryTelecomDetailType"].Rows[0]["PoNumber"].ToString();
                            GRNNumber = dsT.Tables["InventoryTelecomDetailType"].Rows[0]["GRNNumber"].ToString();
                            AddInventoryReturnInventoryFATeam(Emplid, RoleID, UserID, PoNumber, GRNNumber, InventoryID);
                        }
                    }
                }

                //Start - Infra Inventory P2 Changes
                if (dsI != null)
                {
                    if (dsI.Tables["InventoryInfraDetailType"] != null && dsI.Tables["InventoryInfraDetailType"].Rows.Count > 0)
                    {
                        if (objInventoryDesktopDetailEntity.AssetValidationStatusID == 2)
                        {
                            PoNumber = dsI.Tables["InventoryInfraDetailType"].Rows[0]["PoNumber"].ToString();
                            GRNNumber = dsI.Tables["InventoryInfraDetailType"].Rows[0]["GRNNumber"].ToString();
                            AddInventoryReturnInventoryFATeam(Emplid, RoleID, UserID, PoNumber, GRNNumber, InventoryID);
                        }
                    }
                }
                //End - Infra Inventory P2 Changes


            }
            //END -- Send Email Block for Return Inventory

            return ParameterResult;
        }

        // START -- Send Email To FA Team (Return Inventory)
        public void AddInventoryReturnInventoryFATeam(string Emplid, string RoleID, string UserID, string PoNumber, string GRNNumber, string InventoryID)
        {
            string spName = "Proc_SendEmailReturnInventoryFATeam";

            SqlParameter[] SqlParameter = new SqlParameter[7];
            SqlParameter[0] = new SqlParameter("@Emplid", SqlDbType.VarChar);
            SqlParameter[0].Value = Convert.ToString(Emplid);//"3640000145";//);
            SqlParameter[1] = new SqlParameter("@RoleID", SqlDbType.VarChar);
            SqlParameter[1].Value = Convert.ToString(RoleID); //"O00007"; // 
            SqlParameter[2] = new SqlParameter("@UserId", SqlDbType.VarChar);
            SqlParameter[2].Value = Convert.ToString(UserID);// "5640000462";//;
            SqlParameter[3] = new SqlParameter("@PrefixText", SqlDbType.VarChar);
            SqlParameter[3].Value = "";//Convert.ToString(objInventoryEntity.PrefixText);// "5640000462";//;
            SqlParameter[4] = new SqlParameter("@PONumber", SqlDbType.VarChar);
            SqlParameter[4].Value = PoNumber;//Convert.ToString(objInventoryEntity.PrefixText);// "5640000462";//;
            SqlParameter[5] = new SqlParameter("@GRNNumber", SqlDbType.VarChar);
            SqlParameter[5].Value = GRNNumber;//Convert.ToString(objInventoryEntity.PrefixText);// "5640000462";//;
            SqlParameter[6] = new SqlParameter("@InventoryID", SqlDbType.BigInt);
            SqlParameter[6].Value = Convert.ToInt64(InventoryID);

            SqlHelper.ExecuteDataset(Utility.ConnectionString, CommandType.StoredProcedure, spName, SqlParameter);
        }
        // END   -- Send Email To FA Team (Return Inventory)




        // START -- Send Email To Internal Team To Update the Inventory (WNSSite Managers; IT Security; CORE_DT_Support)
        public void SendMailUpdateInventoryToInternalTeam(string Emplid, string RoleID, string UserID, string InventoryID, string InventoryType)
        {
            string spName = "proc_SendMailUpdateInventory";

            SqlParameter[] SqlParameter = new SqlParameter[5];
            SqlParameter[0] = new SqlParameter("@Emplid", SqlDbType.VarChar);
            SqlParameter[0].Value = Convert.ToString(Emplid);//"3640000145";//);
            SqlParameter[1] = new SqlParameter("@RoleID", SqlDbType.VarChar);
            SqlParameter[1].Value = Convert.ToString(RoleID); //"O00007"; // 
            SqlParameter[2] = new SqlParameter("@UserId", SqlDbType.VarChar);
            SqlParameter[2].Value = Convert.ToString(UserID);// "5640000462";//;
            SqlParameter[3] = new SqlParameter("@InventoryID", SqlDbType.VarChar);
            SqlParameter[3].Value = InventoryID;//Convert.ToString(objInventoryEntity.PrefixText);// "5640000462";//;
            SqlParameter[4] = new SqlParameter("@InventoryType", SqlDbType.VarChar);
            SqlParameter[4].Value = InventoryType;//Convert.ToString(objInventoryEntity.PrefixText);// "5640000462";//;
            SqlHelper.ExecuteDataset(Utility.ConnectionString, CommandType.StoredProcedure, spName, SqlParameter);
        }
        // END   -- Send Email To Internal Team To Update the Inventory (WNSSite Managers; IT Security; CORE_DT_Support)

        public List<InventoryEntity> GetLocation(InventoryEntity objInventoryEntity)
        {
            List<InventoryEntity> location = new List<InventoryEntity>();
            string SpName = "proc_GetLocationForViewInventory";
            SqlParameter[] SqlParams = null;
            SqlParams = new SqlParameter[3];

            SqlParams[0] = new SqlParameter("@Emplid", SqlDbType.NVarChar);
            SqlParams[0].Value = Convert.ToString(objInventoryEntity.Emplid);
            SqlParams[1] = new SqlParameter("@UserID", SqlDbType.NVarChar);
            SqlParams[1].Value = Convert.ToString(objInventoryEntity.UserID);
            SqlParams[2] = new SqlParameter("@RoleID", SqlDbType.NVarChar);
            SqlParams[2].Value = Convert.ToString(objInventoryEntity.RoleID);

            SqlDataReader rdr = SqlHelper.ExecuteReader(Utility.ConnectionString, SpName, SqlParams);

            while (rdr.Read())
            {
                InventoryEntity invloc = new InventoryEntity();

                invloc.Location = rdr["Location"].ToString();

                location.Add(invloc);
            }
            return location;
        }

        /// <summary>
        /// Get Subminor Category
        /// </summary>
        /// <param name="ParameterId"></param>
        /// <returns></returns>
        public List<ParameterValues> GetSubMinorCategory(ParameterValues ParameterId)
        {
            List<ParameterValues> ParameterResult = new List<ParameterValues>();

            string SpName = "Proc_GetInventorydetailPOGRN";

            SqlParameter[] SqlParams = new SqlParameter[8];
            SqlParams[0] = new SqlParameter("@ExecId", SqlDbType.BigInt);
            SqlParams[0].Value = 5;
            SqlParams[1] = new SqlParameter("@PONumber", SqlDbType.NVarChar);
            SqlParams[1].Value = 0;
            SqlParams[2] = new SqlParameter("@GRNNumber", SqlDbType.NVarChar);
            SqlParams[2].Value = 0;
            SqlParams[3] = new SqlParameter("@parameterdescr", SqlDbType.NVarChar);
            SqlParams[3].Value = ParameterId.ParameterDescr;
            SqlParams[4] = new SqlParameter("@InventoryType", SqlDbType.NVarChar);
            SqlParams[4].Value = 0;
            SqlParams[5] = new SqlParameter("@EmpID", SqlDbType.NVarChar);
            SqlParams[5].Value = Convert.ToString(ParameterId.Emplid);
            SqlParams[6] = new SqlParameter("@UserID", SqlDbType.NVarChar);
            SqlParams[6].Value = Convert.ToString(ParameterId.UserID);
            SqlParams[7] = new SqlParameter("@RoleID", SqlDbType.NVarChar);
            SqlParams[7].Value = Convert.ToString(ParameterId.RoleID);
            DataTable dt = SqlHelper.ExecuteDataset(Utility.ConnectionString, SpName, SqlParams).Tables[1];

            if (dt != null && dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    ParameterValues ParameterValue = new ParameterValues();
                    ParameterValue.ID = Convert.ToString(dt.Rows[i]["ID"]);
                    ParameterValue.Name = Convert.ToString(dt.Rows[i]["Name"]);
                    ParameterResult.Add(ParameterValue);
                }
            }
            return ParameterResult;
        }
    }
}
